{"version":3,"sources":["components/graph.js","components/defaultNumbers.js","App.js","serviceWorker.js","index.js"],"names":["Graph","props","margin","left","height","width","xType","data","x","ttt","y","yOne","xTwo","yTwo","xThree","yThree","xFour","yFour","xFive","yFive","xSix","ySix","xSeven","ySeven","defaultNumbers","state","countries","location","total","deaths","recovered","states","citys","stateData","selectedState","cityDataArray","lastSevenDays","Date","Cases","axios","get","res","console","log","map","i","push","Country","this","setState","document","getElementById","value","countryData","Countries","TotalConfirmed","TotalDeaths","TotalRecovered","country","stateArray","Province","Set","e","cityArray","selProvince","target","City","chosenCity","chosenState","slice","l","length","lastReport","Math","max","getNumbers","getCountries","getDetails","c","sort","citysState","f","s","Button","color","id","onClick","getCity","cityClickDetails","xOne","className","name","onChange","selectCountry","getCountryData","Component","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7500441.chunk.js","sourcesContent":["import React from 'react';\n\nimport { XYPlot, XAxis, YAxis, VerticalGridLines, HorizontalGridLines, LineSeries, VerticalBarSeries } from 'react-vis';\n\nconst Graph = (props) => {\n    return (\n        <XYPlot margin={{ left: 100 }} height={400} width={800} xType=\"ordinal\">\n            <VerticalGridLines />\n            <HorizontalGridLines />\n            <XAxis margin={4000} xType=\"ordinal\" />\n            <YAxis />\n            <LineSeries data=\n                {[\n                    { x: props.ttt, y: props.yOne },\n                    { x: props.xTwo, y: props.yTwo },\n                    { x: props.xThree, y: props.yThree },\n                    { x: props.xFour, y: props.yFour },\n                    { x:props.xFive, y: props.yFive },\n                    { x: props.xSix, y: props.ySix },\n                    { x:props.xSeven, y: props.ySeven }\n                ]} />\n        </XYPlot >\n\n\n    );\n}\nexport default Graph;","import React, { Component } from 'react';\nimport axios from 'axios'\nimport { Button } from 'reactstrap';\nimport Graph from './graph'\nimport 'bootstrap/dist/css/bootstrap.css';\n\nclass defaultNumbers extends Component {\n\n    state = { countries: [], location: '', total: '', deaths: '', recovered: '', states: [], citys: [], stateData: [], selectedState: '', cityDataArray: [], lastSevenDays: [{ Date: 20011, Cases: 1000 }, { Date: 2002, Cases: 2000 }, { Date: 2003, Cases: 3000 }, { Date: 2004, Cases: 4000 },{ Date: 2005, Cases: 5000 },{ Date: 2006, Cases: 6000 },{ Date: 2007, Cases: 8000 }] }\n\n    async getNumbers() {\n        let res = await axios.get(\n            'https://api.covid19api.com/summary'\n        );\n        await console.log(res.data)\n\n    }\n    async getCountries() {\n        let res = await axios.get('https://api.covid19api.com/countries')\n        let countries = [];\n        res.data.map(i => {\n            countries.push(i.Country)\n            return null\n        })\n        this.setState({ countries })\n    }\n\n    async selectCountry() {\n        let location = document.getElementById('countryCombo').value\n        // console.log(selectedCountry)\n        let countryData = await axios.get(`https://api.covid19api.com/summary`)\n        console.log(countryData.data.Countries)\n        let total\n        let deaths\n        let recovered\n        countryData.data.Countries.map(i => {\n            if (i.Country === location) {\n                console.log('LOOKING HERE')\n                total = i.TotalConfirmed\n                deaths = i.TotalDeaths\n                recovered = i.TotalRecovered\n                return i\n            }\n            return null\n        })\n        this.setState({ total, deaths, recovered, location })\n    }\n\n    async getCountryData() {\n        let country = this.state.location\n        let countryData = await axios.get(`https://api.covid19api.com/summary`)\n        let total\n        let deaths\n        let recovered\n        countryData.data.Countries.map(i => {\n            console.log(i.Country)\n            if (i.Country === country) {\n                console.log('LOOKING HERE')\n                total = i.TotalConfirmed\n                deaths = i.TotalDeaths\n                recovered = i.TotalRecovered\n                return i\n            }\n            return null\n        })\n        this.setState({ total, deaths, recovered })\n    }\n\n    async getDetails() {\n\n        let stateArray = []\n        let countryData = await axios.get(`https://api.covid19api.com/dayone/country/united-states/status/confirmed`)\n        let data = countryData.data\n        // countryData.data.CountryCode=='US'\n        data.map(i => {\n            // only gets cases\n            // console.log(i)\n            stateArray.push(i.Province)\n            // cityArray.push(i.City)\n            return null\n        })\n        // let uniqueCity = [...new Set(cityArray)];\n        let states = [...new Set(stateArray)];\n        this.setState({ states })\n        // console.log(uniqueCity)\n        console.log(states)\n        return null\n    }\n    async getCity(e) {\n        let cityArray = []\n        let selProvince = e.target.value\n        let countryData = await axios.get(`https://api.covid19api.com/dayone/country/united-states/status/confirmed`)\n        let data = countryData.data\n        data.map(i => {\n            if (i.Province === selProvince) {\n                cityArray.push(i.City)\n                // console.log(i)\n            }\n            return null\n        })\n        let stateData = data\n        let selectedState = selProvince\n        this.setState({ stateData })\n        this.setState({ selectedState })\n        // set city state\n        // let citys = cityArray\n        let citys = [...new Set(cityArray)];\n        this.setState({ citys })\n    }\n    cityClickDetails(e) {\n        // console.log(e.target.value)\n        let cityDataArray = []\n        let chosenCity = e.target.value\n        let chosenState = this.state.selectedState\n        // console.log(this.state.stateData)\n        let data = this.state.stateData\n        data.map(i => {\n            if (i.City === chosenCity && i.Province === chosenState) {\n                // console.log(i)\n                i.Date=i.Date.slice(5,10)\n                cityDataArray.push(i)\n                console.log('CITY DATA')\n                // slice(start,end)\n                console.log(i.Date.slice(5,10))\n               \n            }\n        })\n        let l = cityDataArray.length\n        let lastReport = cityDataArray[l - 1]\n        let lastSevenDays = cityDataArray.slice(Math.max(cityDataArray.length - 7, 1))\n        console.log(lastSevenDays)\n        let total = lastReport.Cases\n        let location = lastReport.City\n        this.setState({ cityDataArray, total, location, lastSevenDays })\n    }\n    componentDidMount() {\n        this.getNumbers();\n        this.getCountries();\n        this.getDetails();\n    }\n    render() {\n        let countries = this.state.countries\n        let total = this.state.total\n        let c = this.state.location\n        let deaths = this.state.deaths\n        let recovered = this.state.recovered\n        countries = countries.sort()\n        const states = this.state.states\n        const citysState = this.state.citys\n        const lastSevenDays = this.state.lastSevenDays\n        // console.log(states)\n        const f = countries.map(i => {\n            return <option value={i}>{i}</option>\n        })\n        const s = states.map(i => {\n            return <Button color='info' value={i} id='statesBut' onClick={e => this.getCity(e, 'value')}>{i}</Button>\n        })\n        const citys = citysState.map(i => {\n            return <Button color='info' value={i} id='statesBut' onClick={e => this.cityClickDetails(e, 'value')} >{i}</Button>\n        })\n        const ttt=this.state.lastSevenDays[0].Date\n        const yOne = this.state.lastSevenDays[0].Cases;\n        const yTwo = this.state.lastSevenDays[1].Cases;\n        const yThree = this.state.lastSevenDays[2].Cases;\n        const yFour = this.state.lastSevenDays[3].Cases\n        const yFive = this.state.lastSevenDays[4].Cases;\n        const ySix = this.state.lastSevenDays[5].Cases;\n        const ySeven = this.state.lastSevenDays[6].Cases\n        // \n        const xOne = this.state.lastSevenDays[0].Date;\n        const xTwo = this.state.lastSevenDays[1].Date;\n        const xThree = this.state.lastSevenDays[2].Date;\n        const xFour = this.state.lastSevenDays[3].Date\n        const xFive = this.state.lastSevenDays[4].Date\n        const xSix = this.state.lastSevenDays[5].Date\n        const xSeven = this.state.lastSevenDays[6].Date\n        \n\n        return (\n            <div className=\"page-content\">\n                <div className=\"subheader\">\n                    <h1 className=\"subheader-title\">CoronaVirus-Data</h1>\n                    <div>\n                        <select name=\"countries\" className=\"custom-select\" id=\"countryCombo\" onChange={() => this.selectCountry()}>\n                            {f}\n                        </select>\n                        <Button color=\"success\" id='searchBut' onClick={() => this.getCountryData()}>Search</Button>\n                    </div>\n                {/* <Button color='danger' onClick={() => this.getDetails()}>Testing Details</Button> */}\n                </div>\n                <div className=\"row\">\n                    <div className=\"col-sm-6 col-xl-3\">\n                        <div className=\"location p-3 bg-primary-300 rounded overflow-hidden position-relative text-white mb-g\">\n                            <div className=\"\">\n                                <h3 className=\"display-4 d-block l-h-n m-0 fw-500\">\n                                    {c}\n                                    <small className=\"m-0 l-h-n\">Location</small>\n                                </h3>\n                            </div>\n                            <i className=\"fal fa-user position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n1\"></i>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-6 col-xl-3\">\n                        <div className=\"total-case p-3 bg-warning-400 rounded overflow-hidden position-relative text-white mb-g\">\n                            <div className=\"\">\n                                <h3 className=\"display-4 d-block l-h-n m-0 fw-500\">\n                                    {total}\n                                    <small className=\"m-0 l-h-n\">Total Cases</small>\n                                </h3>\n                            </div>\n                            <i className=\"fal fa-gem position-absolute pos-right pos-bottom opacity-15  mb-n1 mr-n4\"></i>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-6 col-xl-3\">\n                        <div className=\"death p-3 bg-success-200 rounded overflow-hidden position-relative text-white mb-g\">\n                            <div className=\"\">\n                                <h3 className=\"display-4 d-block l-h-n m-0 fw-500\">\n                                    {deaths}\n                                    <small className=\"m-0 l-h-n\">Deaths</small>\n                                </h3>\n                            </div>\n                            <i className=\"fal fa-lightbulb position-absolute pos-right pos-bottom opacity-15 mb-n5 mr-n6\"></i>\n                        </div>\n                    </div>\n                    <div className=\"col-sm-6 col-xl-3\">\n                        <div className=\"recovered p-3 bg-info-200 rounded overflow-hidden position-relative text-white mb-g\">\n                            <div className=\"\">\n                                <h3 className=\"display-4 d-block l-h-n m-0 fw-500\">\n                                {recovered}\n                                <small className=\"m-0 l-h-n\">Recovered</small>\n                                </h3>\n                            </div>\n                            <i className=\"fal fa-globe position-absolute pos-right pos-bottom opacity-15 mb-n1 mr-n4\"></i>\n                        </div>\n                    </div>\n                </div>\n                <div id='stateSections'>\n                    {s}\n                </div>\n                <div id='citySection'>\n                    {citys}\n                </div>\n                <div id='graphSection'>\n                    <Graph yOne={yOne} ttt={ttt}yTwo={yTwo} yThree={yThree} yFour={yFour} yFive={yFive} ySix={ySix} ySeven={ySeven} xOne={xOne} xTwo={xTwo} xThree={xThree} xFour={xFour} xFive={xFive} xSix={xSix} xSeven={xSeven} id='gr' />\n                </div>\n            </div >\n        );\n    }\n}\n\nexport default defaultNumbers;","import React from 'react';\nimport './App.css';\n\nimport DefaultNumbers from './components/defaultNumbers'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <DefaultNumbers />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}